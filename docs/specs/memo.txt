結論


GTFS（標準的なバス情報フォーマット。日本版はGTFS-JP）は「時刻表と停留所・系統の静的データ」であり、乗務員の行路（1日の乗務シーケンス）や交番表（行路の週次ローテーション）を作るための労務・運用制約は持ちません。したがって「GTFSから行路・交番表をそのまま出す」は基本的に難題で、現場で“泥沼”に感じられても不思議ではありません。GTFSが与えるのは便（trip）と停留所時刻の網目であり、欠けている運用情報は別に用意して最適化で補う必要があります。



何が足りないか


GTFSはtrips.txt／stop_times.txtなどの静的表で構成されますが、乗務交替場所、入出庫（pull-out/in）、回送（deadhead）の所要、点呼・点検の時間、資格や車種制約、営業所間の移動、休憩・仮眠などの条件は仕様外です。便を同一車両の連なりで束ねるblock_idが入っていれば車両行路の推定は一歩前進しますが、任意項目であり未提供の事業者も少なくありません。国内実務では、trip_id命名に交番記号等を埋め込むローカル運用例もありますが、これは標準の外であり機械処理の前提にはできません。



なぜ難しいか（計算量と法規）


行路作成（Crew Scheduling）と交番編成（Crew Rostering）は、既存の便をすべてカバーしつつコストや公平性を満たす最適化で、古典的にNP困難問題とされています。制約としては、連続運転・休息・拘束時間などの「改善基準告示」（2024/4適用改正）が実務上の下限条件となり、単純な時刻表整列では満たせません。つまり「データ欠落＋計算量の壁」の二重苦があり、表計算で回すほど局所最適や違反を生みやすくなります。



デジタル化の実例と“やりやすさ”


国内でもAI最適化で交番表・乗務行路表を自動生成する取り組みが進み、名鉄バスの事例では作成工数の大幅短縮が報じられています。現実解は「GTFSをインプットの1つに使い、追加の運用・労務データと数理最適化で行路→交番へ落とす」二段構えです。規模が小さく、単一営業所でダイヤが素直、block_idや交替地点が整理済みなら“やりやすい”部類に入りますが、多営業所・多日種・多車種・欠測多めだと一気に難度が上がります。



実務フロー（最小構成）


まず、データ整備としてGTFSのバリデーション（方向direction_id、カレンダー、停留所位置、block_idの有無）を機械検査します。次に、車両行路を作るために、block_idが無い場合は発時刻・地理距離と営業所位置から回送所要の推定モデルを置き、便同士を連結して「ピース」を生成します。最後に、乗務行路→交番は改善基準告示・労使協定・スキル等の制約を数理モデル（MIP／列生成やGRASPなど）に落として解き、担当者が画面で微調整して確定します。既製の検証・作表ツールや最適化SaaSを併用すると初期立ち上げが早くなります。



“やりやすさ”の目安（結論の言い換え）
小規模・単一営業所・block_idありなら、GTFS＋軽い補助データで半自動化は容易です。

中規模・複数営業所・欠測少なめなら、回送推定と法規制約を入れた最適化で実務的に回ります。

大規模・欠測多め・複雑な交替なら、データ設計とモデリングを伴う導入プロジェクトが必要で難寄りです。



次にやるべきは、手元のGTFSの健全性チェック（特にblock_id／カレンダー／停留所座標）と、交替地点・入出庫・休憩規則の“別表”を整えることです。ここまで揃えば、行路生成と交番自動化のPoCは短期で設計可能です。