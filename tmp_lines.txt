   1: # TS-bus-operation-app
   2: 
   3: 運用計画のMVP。GTFS取り込み → Block（運用）推定 → Duty（乗務）設計・検証を、シンプルなUIとCSV入出力で素早く回すためのWebアプリです。
   4: 
   5: ## このアプリでできること（主要機能）
   6: - GTFS/GTFS-JPのZIPをドラッグ＆ドロップで取り込み、routes/trips/calendar/stop_times/shapes/stopsを解析してローカルに保持。
   7: - サービスと時系列に沿って、続けて運行できる次の便を順に選んでつなぎ、行路（Vehicle Block）を推定し表示。Blocks CSVとしても出力可能。
   8: - 推定した行路（Block）を素材に仕業（Duty）を設計。セグメントの追加・移動・削除、履歴を使ったやり直しに対応。CSV出力も可能。
   9: - 安全・労務ルール（中拘束・交代地点制約など）を自動検証し、不適合を早期に把握。アラート表示。ただしアラートがあっても作業継続可能。
  10: - 地図（MapLibre）と表の両方で可視化。Stops/Shapes表示、Tripのハイライト、基本的なフィルタを提供。
  11: - ダッシュボードでの集計により、案の比較・評価を支援。
  12: 
  13: ## 用語と全体フロー（現場準拠）
  14: 1. サービス計画/時刻計画
  15:    ・入力：GTFS（時刻表・経路・運行日）、運行カレンダーの例外（calendar_dates）
  16:    ・補足：自社で時刻表を改訂する場合はここが上流。GTFSは「基準データ」。
  17: 
  18: 2. 運用前提の付加（計画パラメータ）
  19:    ・必須：車庫（depot）、交替可能地点（relief point）、回送/入出庫所要、車両属性（長さ/乗車定員/ノンステップ/燃料・充電）、運用制約（充電・点検時間）
  20:    ・任意：路外待機場、道路制約
  21: 
  22: 3. 行路表（Vehicle Blocks）を作成
  23:    ・意味：1台の車両が「出庫→営業→回送→休憩→入庫」まで1日の“つながり”
  24:    ・可視化：ガントで「営業（濃色）/回送（薄色）/入出庫（ハッチ）/停留（灰）」区分
  25:    ・ポイント：GTFSのtripを連結し、入出庫・回送・折返し余裕（layover）を明示
  26: 
  27: 4. 仕業/乗務表（Crew Duties/Pieces）を作成
  28:    ・意味：1人の乗務員が1日で担当する勤務のまとまり（＝仕業/Duty）。Dutyは複数の乗務片（Piece：乗継単位）で構成
  29:    ・制約反映：拘束時間・実乗務時間・休憩/手待ち・深夜等の労務規程
  30: 
  31: 5. 交番表（Rosters）を編成
  32:    ・意味：1週間などの周期で「月〜日」にDutyを並べた“パターン”。公平性や生活リズムを担保
  33:    ・注意：「交番＝長期パターン」、「当日割付＝日々の担当確定」は別物
  34: 
  35: 6. 当日割付（Daily Assignment）で最終決定
  36:    ・入力：交番表、休暇・研修・免許条件、当日欠勤/遅延、車両故障
  37:    ・出力：その日の「誰が・どのDuty（≒どの行路のどのPiece）に・どこで乗るか」
  38:    ・運用：休暇は原則ここで代番・スワップで吸収（計画的長期休暇は交番再編で対応）
  39: 
  40: > 推奨の整理：
  41: > 「GTFS →（＋車両/車庫/交替点/回送）→ 行路表 → 仕業表 → 交番表 → 当日割付（休暇等を反映して最終決定）」
  42: > “シフト”は曖昧語のため、設計上は「交番（パターン）」と「当日割付（実運用）」に分けて記述します。
  43: 
  44: ## 画面と可視化（MVP→次段階）
  45: A. GTFSビューア（入力確認）
  46: - 地図＋時刻表。service_id/日付フィルタ、trip選択で経路と停車時刻。
  47: - 差分表示：calendar_datesの例外を色替え。
  48: 
  49: B. 行路ビルダー（車両ガント）
  50: - レーン＝「計画上の車両スロット」（実車番は後付けでもOK）
  51: - 色：営業/回送/入出庫/停留、重ねて「充電・給油」「点検」をアイコン化
  52: - 自動チェック：折返し不足、車庫容量、車両属性不適合（大型不可路線など）
  53: 
  54: C. 仕業ビルダー（乗務ガント）
  55: - レーン＝Duty。区分：Sign-on/点呼、Piece、休憩、手待ち、Sign-off
  56: - 制約違反を右側にスタック（拘束>◯h、休憩<◯分 等）
  57: 
  58: D. 交番エディタ（週次グリッド）
  59: - 行＝交番パターン、列＝曜日、セル＝Dutyコード
  60: - KPI：夜勤回数/早番回数の分散、週実乗務時間の偏差、連続早番の上限
  61: 
  62: E. 当日割付ボード
  63: - 左：本日のDuty一覧（欠員/代番必要を赤）
  64: - 右：乗務員プール（資格タグ、勤務間インターバル、当月実績）
  65: - ドラッグ&ドロップで割付→労務チェック→確定→配車票/点呼票出力
  66: 
  67: F. KPIダッシュ（横断）
  68: - 車両：営業/回送比、予備車率、車庫別出入庫ピーク
  69: - 労務：人件費試算、拘束・休憩遵守率、交番の公平性指標
  70: 
  71: ## 最小データモデル（MVP用）
  72: - gtfs_trips/stop_times/calendar(_dates)（読取専用）
  73: - depots（車庫）、relief_points（交替地点）
  74: - vehicles（属性：長さ/座席/低床/燃料/充電性能/所属車庫/整備周期）
  75: - deadheads（地点間所要：車庫↔起終点、折返し、回送）
  76: - blocks（行路）・block_segments（営業/回送/入出庫/停留の区分）
  77: - duties（仕業）・pieces（乗務片）・sign_events（点呼/点検）
  78: - roster_lines（交番パターン）・roster_calendar（週→人への適用）
  79: - employees（資格/免許/勤務条件）・leave_requests（確定/申請中）
  80: - assignments（当日割付：人×Piece）・violations（自動検出ログ）
  81: - scenarios（版管理：MVPは手動ブランチでもOK）
  82: 
  83: ## ルール・制約の取り扱い（早めにパラメタ化）
  84: - 労務：1日の実乗務上限、拘束上限、休憩最短、勤務間インターバル、深夜帯定義
  85: - 車両：車種縛り、車庫所属、充電/給油時間とSOC/燃料制約、整備入庫周期
  86: - 運行：折返し最短、出入庫可能時刻、交替可能地点、回送経路許可
  87: 
  88: ## 可視化の結合インタラクション
  89: - どれか一つ（Trip/Block/Duty/Roster）を選ぶと、他レイヤがハイライトされる“クロスハイライト”。
  90: - 例：Tripをクリック→そのTripを含むBlock区間が濃色→それを含むDutyが点灯→交番セルが強調。
  91: - 不整合は常に右ペインに積む（修正→リチェックが一目でわかる）。
  92: 
  93: ## 用語ポリシー
  94: - 本READMEでは「shift」という語は使わず、計画は「交番（Roster）」、当日の確定は「当日割付（Assignment）」として記述します。
  95: - 既存の指標キー `totalShifts`/`shiftCount` はコード互換のためそのまま表記しますが、意味は「割付単位」です。
  96: 
  97: ## プロジェクトの目的
  98: - GTFSからBlock（運用単位）を推定し、Duty（乗務）を短時間で設計・検証できる最小限の体験を提供する。
  99: - 現場判断に必要な可視化と、CSVによる入出力（インポート/エクスポート）を提供する。
 100: 
 101: ## ビジネス目的（達成すること）
 102: - 運用案の初期作成と見直しのリードタイムを短縮し、意思決定サイクルを高速化する。
 103: - 安全・労務ルール（中拘束・交代地点制約など）の自動検証で不適合を早期発見し、修正コストを低減する。
 104: - 現場と企画の合意形成を支援（地図と表での可視化、CSVで共有・差分比較）。
 105: - データの再現性と移行性を確保（GTFS/CSVベース、ベンダーロックイン回避）。
 106: 
 107: ## 対象ユーザー/ユースケース
 108: - 企画・運用担当者: 初期の運用案を素早く作成し、安全ルールに照らして検証。
 109: - 現場スーパーバイザー: ブロック/乗務の修正点を可視化し、差分を把握して共有。
 110: - データ管理者: GTFS/CSVの入出力で再現性を担保し、他システムと連携。
 111: 
 112: ## 入出力仕様（概要）
 113: - 入力: GTFS/GTFS-JP ZIP（ドラッグ&ドロップ）
 114: - 出力:
 115:   - Blocks CSV（行路）: `block_id, seq, trip_id, trip_start, trip_end, from_stop_id, to_stop_id, service_id`
 116:   - Duties CSV（仕業）: `duty_id, seq, block_id, segment_start_trip_id, segment_end_trip_id, driver_id`
 117:   - 取込結果スナップショット（JSON）: 再読込可能（gtfsPersistence）
 118: 
 119: ## 操作フロー（最短）
 120: 1) GTFS ZIPを読み込み → サマリ/地図で概況確認（サービス絞り込み可）。
 121: 2) Blockを自動推定 → カバレッジ/ギャップを見ながら必要箇所のみ修正。
 122: 3) Dutyを区間指定で追加/移動/削除 → 検証/警告（中拘束・連続上限・1日上限）。
 123: 4) CSVへエクスポート、または差分とダッシュボードで影響を確認。
 124: 
 125: ## クイックスタート
 126: 前提: Node.js 20系（LTS推奨）、npm 10+
 127: 
 128: ```
 129: # 依存のインストール
 130: npm ci   # 既存 lock を厳密に反映（推奨）
 131: # or
 132: npm install
 133: 
 134: # 開発サーバ（Vite）
 135: npm run dev
 136: # → ブラウザで http://localhost:5173 を開く
 137: 
 138: # 本番ビルドとローカルプレビュー（任意）
 139: npm run build
 140: npm run preview
 141: 
 142: # テスト（任意）
 143: npm test
 144: ```
 145: 
 146: ## 技術スタック（最小）
 147: - フロントエンド: React 19 + TypeScript, Vite, Tailwind CSS, shadcn/ui（Radix UI）, TanStack Table, Sonner
 148: - 地図: MapLibre GL
 149: - ユーティリティ: JSZip, Papa Parse, clsx, class-variance-authority, tailwind-merge
 150: - テスト/実行: node:test（tsx）, 各種CLIは `npx tsx tools/<name>Cli.ts ...`
 151: 
 152: ## 機能（詳細・ノースポール）
 153: - データ取り込み/検証
 154:   - 入力: GTFS/GTFS-JP の ZIP をドラッグ&ドロップで読込。
 155:   - 解析: routes/trips/calendar/stop_times/shapes/stops を正規化し、欠損ファイルを検出。
 156:   - サマリ: 路線数・便数などを集計。保存/再読込のための JSON スナップショットを作成（`src/services/import/gtfsPersistence.ts`）。
 157: - エクスプローラ（地図）
 158:   - MapLibre 表示（OSM）。Stops/Shapes の表示切替、サービス（日付種別）でのフィルタ。
 159:   - Stop/Shape の詳細（関連Trip数、サービスIDなど）と自動フィット（bounds計算）。
 160: - Block 推定（運用単位）
 161:   - アルゴリズム: 時系列順に、続けて運行できる次の便を順に選んで連結（いわゆる貪欲法）。サービスID・運用日ごとにグルーピングし、`maxTurnGapMinutes` 以内のみ許容。
 162:   - 出力: CSV相当の行（`block_id, seq, trip_id, trip_start, trip_end, from_stop_id, to_stop_id, service_id`）。カバレッジ比率（assign/total）とギャップ統計を表示。
 163: - Duty 設計・検証（乗務）
 164:   - 操作: Blockと区間（開始/終了Trip）を選択してセグメント追加・移動・削除（整合チェックを内蔵）。
 165:   - 検証: 中拘束（最小休憩）、連続運転の上限、1日合計の上限を算出し警告を表示（`computeDutyMetrics`）。
 166:   - 自動修正: 違反セグメントを優先的に間引くヒューリスティック（`autoCorrectDuty`）。
 167:   - CSV スキーマ（MVP）: `duty_id, seq, block_id, segment_start_trip_id, segment_end_trip_id, driver_id`。
 168: - スケジュール差分/ダッシュボード
 169:   - 差分: 追加/削除/担当替えを検出し、未変更件数とメトリクス差分を算出（`diffSchedules`）。
 170:   - メトリクス: 勤務時間の合計・未割当数・公平性スコアなどを集計（`dashboardCalculator`）。
 171: 
 172: ## ノースメトリクス（ダッシュボード）
 173: - シフト総数: `totalShifts`（割当済みのシフト件数）
 174: - 総勤務時間: `totalHours`（時間単位。routesの時間差から集計）
 175: - 未割当件数: `unassignedCount`（必要人数に対して不足している割当）
 176: - 公平性スコア: `fairnessScore`（0〜100、均等=100）
 177: - 個別ワークロード: `workloadAnalysis`（driverIdごとの`shiftCount`/`hours`）
 178: 
 179: ## サンプルデータ
 180: - テスト用GTFS: `data/GTFS-JP(gunmachuo).zip`
 181: 
 182: ## スコープ（MVP）
 183: - Block推定の目標達成率は 70~80% を目安とする。
 184: - 地図は MapLibre をデフォルト採用。
 185: - Dutyルールには「中拘束（mid-duty break）」「交代地点制約（relief-point constraint）」を含む。
 186: 
 187: ## 主な操作
 188: - GTFS ZIPの読み込みと概要確認
 189: - 推定されたBlockの確認・必要な修正
 190: - Dutyの追加/移動/削除とCSV入出力
 191: 
 192: ## CLI（補助ツール）
 193: - `npx tsx tools/encodingScanCli.ts ...`
 194: - `npx tsx tools/playwrightCli.ts ...`
 195: - `npx tsx tools/chromeDevtoolsCli.ts ...`
 196: - `npx tsx tools/context7Cli.ts ...`
 197: 
 198: ## 動作環境
 199: - 必須: Node.js 20（LTS推奨）, npm 10+
 200: - ブラウザ: 最新版の Chrome/Edge（MapLibre表示を含む）
 201: - 権限/ネットワーク: 外部APIや自動化ツールの利用時は社内ポリシーに従う（Context7/Playwright/DevTools CLIなど）
 202: 
 203: ## 非目標（MVP外）
 204: - PDFレポート/RBAC/本格サーバAPIの提供（将来検討）
 205: - 高度な最適化（MIP/CP 等）や大規模データ分散処理
