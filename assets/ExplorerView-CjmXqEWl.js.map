{"version":3,"mappings":"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","names":["buildExplorerDataset","result","options","normalizedFilter","sanitizeId","_a","manual","duties","blockPlan","emptyExplorerDataset","stopsTable","shapesTable","tripsTable","stopTimesTable","allTripIds","tripServiceMap","serviceTripIds","serviceStopIds","serviceShapeIds","stopTripIds","shapeTripIds","buildRelationships","services","buildServiceOptions","selectedServiceId","service","activeTripIds","serviceTrips","allowedStopIds","allowedShapeIds","stopArtifacts","buildStopArtifacts","shapeArtifacts","buildShapeArtifacts","tripStopLookup","buildTripStopLookup","dutyStopUsage","computeDutyStopUsage","manualOverlay","buildManualOverlay","manualSummary","buildManualSummary","bounds","calculateBounds","createFeatureCollection","buildExplorerGeoJson","filter","emptyExplorerGeoJson","lookup","row","tripId","span","fromStop","toStop","tripStops","counts","duty","segment","touched","startSpan","endSpan","stopId","incrementCount","deadheadCounts","rule","fromId","toId","depotFeatures","depot","dutyImpactCount","reliefFeatures","relief","stopImpact","deadheadImpact","overlay","depotImpacts","sum","feature","reliefImpacts","features","map","key","amount","next","serviceId","ensureSet","shapeId","table","details","lat","toNumber","lon","name","sanitizeOptional","code","tripIds","totalTripCount","activeTripCount","countMatchingTrips","serviceSet","localeCompareString","grouped","sequence","points","a","b","coordinates","point","tripCount","existing","created","matched","stops","shapes","minLon","minLat","maxLon","maxLat","expand","value","parsed","trimmed","defaultImporter","__vitePreload","n","activeImporter","cachedPromise","loadMapLibre","STYLE_URL","STOPS_SOURCE_ID","SHAPES_SOURCE_ID","STOPS_LAYER_ID","SHAPES_LAYER_ID","DEPOTS_SOURCE_ID","RELIEF_SOURCE_ID","DEPOTS_LAYER_ID","RELIEF_LAYER_ID","MAP_FIT_PADDING","DEFAULT_CENTER","DEFAULT_ZOOM","MapView","dataset","onSelect","showDepots","showReliefPoints","containerRef","useRef","mapRef","mapLoadedRef","latestBoundsRef","latestDatasetRef","showDepotsRef","showReliefPointsRef","missingImageIdsRef","useEffect","applyExplorerData","updateOverlayVisibility","cancelled","handleLoad","activeMap","initializeSources","handleClick","event","selection","getSelectionFromEvent","maplibre","id","width","height","transparentPixel","error","jsx","empty","boundsRef","data","stopsSource","shapesSource","depotsSource","reliefSource","manualBounds","calculateManualOverlayBounds","targetBounds","mergeBounds","areBoundsEqual","include","primary","secondary","depotFeature","candidate","properties","depotId","reliefFeature","reliefId","stopFeature","shapeFeature","ALL_SERVICES_VALUE","ExplorerView","dutyState","useGtfsImport","serviceValue","setServiceValue","useState","setSelection","setShowDepots","setShowReliefPoints","useMemo","activeServiceOption","serviceLabel","disableSelect","jsxs","Select","SelectTrigger","SelectValue","SelectContent","SelectItem","formatServiceOptionLabel","Badge","Button","prev","ManualSummaryCard","SelectionPanel","summary","Card","CardHeader","CardTitle","CardDescription","CardContent","InfoRow","fallbackCard","detail","label","message","option"],"ignoreList":[],"sources":["../../src/features/explorer/mapData.ts","../../src/features/explorer/loadMapLibre.ts","../../src/features/explorer/MapView.tsx","../../src/features/explorer/ExplorerView.tsx"],"sourcesContent":["/**\n * src/features/explorer/mapData.ts\n * Converts GTFS import tables into GeoJSON for Explorer map overlays and derives\n * service/day summaries for filtering and detail panels.\n */\nimport type { Feature, FeatureCollection, LineString, Point, Position } from 'geojson';\nimport type { ManualInputs, Duty } from '@/types';\nimport type { BlockPlan } from '@/services/blocks/blockBuilder';\nimport type { GtfsImportResult, GtfsTable } from '../../services/import/gtfsParser';\n\nexport type BoundingBox = [number, number, number, number];\n\nexport interface StopProperties extends Record<string, unknown> {\n  stopId: string;\n  name?: string;\n  code?: string;\n}\n\nexport interface ShapeProperties extends Record<string, unknown> {\n  shapeId: string;\n}\n\nexport interface ExplorerGeoJson {\n  stops: FeatureCollection<Point, StopProperties>;\n  shapes: FeatureCollection<LineString, ShapeProperties>;\n  bounds: BoundingBox | null;\n}\n\nexport interface ExplorerFilter {\n  serviceId?: string | null;\n}\n\nexport interface ExplorerServiceOption {\n  serviceId: string;\n  label: string;\n  tripCount: number;\n  stopCount: number;\n}\n\nexport interface ExplorerStopDetail {\n  stopId: string;\n  name?: string;\n  code?: string;\n  latitude: number;\n  longitude: number;\n  totalTripCount: number;\n  activeTripCount: number;\n  serviceIds: string[];\n}\n\nexport interface ExplorerShapeDetail {\n  shapeId: string;\n  tripCount: number;\n  activeTripCount: number;\n  serviceIds: string[];\n}\n\nexport interface ExplorerDataset {\n  geoJson: ExplorerGeoJson;\n  services: ExplorerServiceOption[];\n  stopDetails: Record<string, ExplorerStopDetail>;\n  shapeDetails: Record<string, ExplorerShapeDetail>;\n  selectedServiceId?: string;\n  manualOverlay: ExplorerManualOverlay;\n  manualSummary: ExplorerManualSummary;\n}\n\nexport interface ExplorerManualOverlay {\n  depots: FeatureCollection<Point, DepotOverlayProperties>;\n  reliefPoints: FeatureCollection<Point, ReliefPointOverlayProperties>;\n}\n\nexport interface DepotOverlayProperties extends Record<string, unknown> {\n  depotId: string;\n  name?: string;\n  dutyImpactCount: number;\n}\n\nexport interface ReliefPointOverlayProperties extends Record<string, unknown> {\n  reliefId: string;\n  name?: string;\n  stopId?: string;\n  dutyImpactCount: number;\n}\n\nexport interface ExplorerManualSummary {\n  depotCount: number;\n  reliefPointCount: number;\n  totalDutyImpacts: number;\n}\n\nexport interface ExplorerDatasetOptions {\n  filter?: ExplorerFilter;\n  manual?: ManualInputs;\n  duties?: Duty[];\n  blockPlan?: BlockPlan;\n}\n\nexport function buildExplorerDataset(result?: GtfsImportResult, options?: ExplorerDatasetOptions): ExplorerDataset {\n  const normalizedFilter = sanitizeId(options?.filter?.serviceId ?? undefined) ?? undefined;\n  const manual = options?.manual;\n  const duties = options?.duties ?? [];\n  const blockPlan = options?.blockPlan;\n  if (!result) {\n    return emptyExplorerDataset(normalizedFilter, manual);\n  }\n\n  const stopsTable = result.tables['stops.txt'];\n  const shapesTable = result.tables['shapes.txt'];\n  const tripsTable = result.tables['trips.txt'];\n  const stopTimesTable = result.tables['stop_times.txt'];\n\n  const {\n    allTripIds,\n    tripServiceMap,\n    serviceTripIds,\n    serviceStopIds,\n    serviceShapeIds,\n    stopTripIds,\n    shapeTripIds,\n  } = buildRelationships(tripsTable, stopTimesTable);\n\n  const services = buildServiceOptions(serviceTripIds, serviceStopIds);\n  const selectedServiceId = normalizedFilter && services.some((service) => service.serviceId === normalizedFilter)\n    ? normalizedFilter\n    : undefined;\n\n  let activeTripIds: Set<string>;\n  if (selectedServiceId) {\n    const serviceTrips = serviceTripIds.get(selectedServiceId);\n    activeTripIds = serviceTrips ? new Set(serviceTrips) : new Set<string>();\n  } else {\n    activeTripIds = allTripIds;\n  }\n\n  const allowedStopIds = selectedServiceId ? serviceStopIds.get(selectedServiceId) ?? new Set<string>() : undefined;\n  const allowedShapeIds = selectedServiceId ? serviceShapeIds.get(selectedServiceId) ?? new Set<string>() : undefined;\n\n  const stopArtifacts = buildStopArtifacts({\n    table: stopsTable,\n    allowedStopIds,\n    stopTripIds,\n    tripServiceMap,\n    activeTripIds,\n  });\n\n  const shapeArtifacts = buildShapeArtifacts({\n    table: shapesTable,\n    allowedShapeIds,\n    shapeTripIds,\n    tripServiceMap,\n    activeTripIds,\n  });\n\n  const tripStopLookup = buildTripStopLookup(blockPlan);\n  const dutyStopUsage = computeDutyStopUsage(duties, tripStopLookup);\n  const manualOverlay = buildManualOverlay(manual, dutyStopUsage);\n  const manualSummary = buildManualSummary(manualOverlay);\n\n  const bounds = calculateBounds(stopArtifacts.features, shapeArtifacts.features);\n\n  return {\n    geoJson: {\n      stops: createFeatureCollection(stopArtifacts.features),\n      shapes: createFeatureCollection(shapeArtifacts.features),\n      bounds,\n    },\n    services,\n    stopDetails: stopArtifacts.details,\n    shapeDetails: shapeArtifacts.details,\n    selectedServiceId,\n    manualOverlay,\n    manualSummary,\n  };\n}\n\nexport function buildExplorerGeoJson(result?: GtfsImportResult, filter?: ExplorerFilter): ExplorerGeoJson {\n  return buildExplorerDataset(result, { filter }).geoJson;\n}\n\nfunction emptyExplorerDataset(selectedServiceId?: string, manual?: ManualInputs): ExplorerDataset {\n  const manualOverlay = buildManualOverlay(manual, new Map());\n  return {\n    geoJson: emptyExplorerGeoJson(),\n    services: [],\n    stopDetails: {},\n    shapeDetails: {},\n    selectedServiceId,\n    manualOverlay,\n    manualSummary: buildManualSummary(manualOverlay),\n  };\n}\n\nfunction emptyExplorerGeoJson(): ExplorerGeoJson {\n  return {\n    stops: createFeatureCollection<Point, StopProperties>([]),\n    shapes: createFeatureCollection<LineString, ShapeProperties>([]),\n    bounds: null,\n  };\n}\n\ntype TripStopLookup = Map<string, TripStopSpan>;\n\ninterface TripStopSpan {\n  startStopId?: string;\n  endStopId?: string;\n}\n\nfunction buildTripStopLookup(blockPlan?: BlockPlan): TripStopLookup {\n  const lookup: TripStopLookup = new Map();\n  if (!blockPlan) {\n    return lookup;\n  }\n\n  for (const row of blockPlan.csvRows) {\n    const tripId = sanitizeId(row.tripId);\n    if (!tripId) {\n      continue;\n    }\n    const span = lookup.get(tripId) ?? {};\n    const fromStop = sanitizeId(row.fromStopId);\n    if (fromStop && span.startStopId === undefined) {\n      span.startStopId = fromStop;\n    }\n    const toStop = sanitizeId(row.toStopId);\n    if (toStop && span.endStopId === undefined) {\n      span.endStopId = toStop;\n    }\n    lookup.set(tripId, span);\n  }\n\n  return lookup;\n}\n\nfunction computeDutyStopUsage(duties: Duty[], tripStops: TripStopLookup): Map<string, number> {\n  const counts = new Map<string, number>();\n  for (const duty of duties) {\n    for (const segment of duty.segments) {\n      const touched = new Set<string>();\n      const startSpan = tripStops.get(segment.startTripId);\n      if (startSpan?.startStopId) {\n        touched.add(startSpan.startStopId);\n      }\n      if (startSpan?.endStopId) {\n        touched.add(startSpan.endStopId);\n      }\n      const endSpan = tripStops.get(segment.endTripId);\n      if (endSpan?.startStopId) {\n        touched.add(endSpan.startStopId);\n      }\n      if (endSpan?.endStopId) {\n        touched.add(endSpan.endStopId);\n      }\n      for (const stopId of touched) {\n        incrementCount(counts, stopId);\n      }\n    }\n  }\n  return counts;\n}\n\nfunction buildManualOverlay(manual: ManualInputs | undefined, dutyStopUsage: Map<string, number>): ExplorerManualOverlay {\n  if (!manual) {\n    return {\n      depots: createFeatureCollection<Point, DepotOverlayProperties>([]),\n      reliefPoints: createFeatureCollection<Point, ReliefPointOverlayProperties>([]),\n    };\n  }\n\n  const deadheadCounts = new Map<string, number>();\n  for (const rule of manual.deadheadRules) {\n    const fromId = sanitizeId(rule.fromId);\n    if (fromId) {\n      incrementCount(deadheadCounts, fromId);\n    }\n    const toId = sanitizeId(rule.toId);\n    if (toId) {\n      incrementCount(deadheadCounts, toId);\n    }\n  }\n\n  const depotFeatures: Feature<Point, DepotOverlayProperties>[] = [];\n  for (const depot of manual.depots) {\n    if (!Number.isFinite(depot.lat) || !Number.isFinite(depot.lon)) {\n      continue;\n    }\n    const dutyImpactCount = deadheadCounts.get(depot.depotId) ?? 0;\n    depotFeatures.push({\n      type: 'Feature',\n      geometry: { type: 'Point', coordinates: [depot.lon, depot.lat] },\n      properties: {\n        depotId: depot.depotId,\n        name: depot.name,\n        dutyImpactCount,\n      },\n    });\n  }\n\n  const reliefFeatures: Feature<Point, ReliefPointOverlayProperties>[] = [];\n  for (const relief of manual.reliefPoints) {\n    if (!Number.isFinite(relief.lat) || !Number.isFinite(relief.lon)) {\n      continue;\n    }\n    const stopId = relief.stopId ? sanitizeId(relief.stopId) ?? undefined : undefined;\n    const stopImpact = stopId ? dutyStopUsage.get(stopId) ?? 0 : 0;\n    const deadheadImpact = deadheadCounts.get(relief.reliefId) ?? 0;\n    const dutyImpactCount = stopImpact + deadheadImpact;\n    reliefFeatures.push({\n      type: 'Feature',\n      geometry: { type: 'Point', coordinates: [relief.lon, relief.lat] },\n      properties: {\n        reliefId: relief.reliefId,\n        name: relief.name,\n        stopId,\n        dutyImpactCount,\n      },\n    });\n  }\n\n  return {\n    depots: createFeatureCollection(depotFeatures),\n    reliefPoints: createFeatureCollection(reliefFeatures),\n  };\n}\n\nfunction buildManualSummary(overlay: ExplorerManualOverlay): ExplorerManualSummary {\n  const depotImpacts = overlay.depots.features.reduce((sum, feature) => sum + (feature.properties?.dutyImpactCount ?? 0), 0);\n  const reliefImpacts = overlay.reliefPoints.features.reduce((sum, feature) => sum + (feature.properties?.dutyImpactCount ?? 0), 0);\n  return {\n    depotCount: overlay.depots.features.length,\n    reliefPointCount: overlay.reliefPoints.features.length,\n    totalDutyImpacts: depotImpacts + reliefImpacts,\n  };\n}\n\nfunction createFeatureCollection<G extends Point | LineString, P extends Record<string, unknown>>(\n  features: Feature<G, P>[],\n): FeatureCollection<G, P> {\n  return { type: 'FeatureCollection', features };\n}\n\nfunction incrementCount(map: Map<string, number>, key: string, amount = 1): void {\n  const next = (map.get(key) ?? 0) + amount;\n  map.set(key, next);\n}\n\ninterface Relationships {\n  allTripIds: Set<string>;\n  tripServiceMap: Map<string, string | undefined>;\n  serviceTripIds: Map<string, Set<string>>;\n  serviceStopIds: Map<string, Set<string>>;\n  serviceShapeIds: Map<string, Set<string>>;\n  stopTripIds: Map<string, Set<string>>;\n  shapeTripIds: Map<string, Set<string>>;\n}\n\nfunction buildRelationships(tripsTable?: GtfsTable, stopTimesTable?: GtfsTable): Relationships {\n  const allTripIds = new Set<string>();\n  const tripServiceMap = new Map<string, string | undefined>();\n  const serviceTripIds = new Map<string, Set<string>>();\n  const serviceStopIds = new Map<string, Set<string>>();\n  const serviceShapeIds = new Map<string, Set<string>>();\n  const stopTripIds = new Map<string, Set<string>>();\n  const shapeTripIds = new Map<string, Set<string>>();\n\n  if (tripsTable) {\n    for (const row of tripsTable.rows) {\n      const tripId = sanitizeId(row.trip_id);\n      if (!tripId) {\n        continue;\n      }\n      allTripIds.add(tripId);\n      const serviceId = sanitizeId(row.service_id) ?? undefined;\n      tripServiceMap.set(tripId, serviceId);\n      if (serviceId) {\n        ensureSet(serviceTripIds, serviceId).add(tripId);\n      }\n      const shapeId = sanitizeId(row.shape_id);\n      if (shapeId) {\n        ensureSet(shapeTripIds, shapeId).add(tripId);\n        if (serviceId) {\n          ensureSet(serviceShapeIds, serviceId).add(shapeId);\n        }\n      }\n    }\n  }\n\n  if (stopTimesTable) {\n    for (const row of stopTimesTable.rows) {\n      const tripId = sanitizeId(row.trip_id);\n      const stopId = sanitizeId(row.stop_id);\n      if (!tripId || !stopId) {\n        continue;\n      }\n      allTripIds.add(tripId);\n      ensureSet(stopTripIds, stopId).add(tripId);\n      const serviceId = tripServiceMap.get(tripId);\n      if (serviceId) {\n        ensureSet(serviceStopIds, serviceId).add(stopId);\n      }\n    }\n  }\n\n  return {\n    allTripIds,\n    tripServiceMap,\n    serviceTripIds,\n    serviceStopIds,\n    serviceShapeIds,\n    stopTripIds,\n    shapeTripIds,\n  };\n}\n\ninterface StopArtifactOptions {\n  table?: GtfsTable;\n  allowedStopIds?: Set<string>;\n  stopTripIds: Map<string, Set<string>>;\n  tripServiceMap: Map<string, string | undefined>;\n  activeTripIds: Set<string>;\n}\n\ninterface StopArtifactsResult {\n  features: Feature<Point, StopProperties>[];\n  details: Record<string, ExplorerStopDetail>;\n}\n\nfunction buildStopArtifacts(options: StopArtifactOptions): StopArtifactsResult {\n  const { table, allowedStopIds, stopTripIds, tripServiceMap, activeTripIds } = options;\n  if (!table) {\n    return { features: [], details: {} };\n  }\n\n  const features: Feature<Point, StopProperties>[] = [];\n  const details: Record<string, ExplorerStopDetail> = {};\n\n  for (const row of table.rows) {\n    const lat = toNumber(row.stop_lat);\n    const lon = toNumber(row.stop_lon);\n    const stopId = sanitizeId(row.stop_id);\n    if (lat === null || lon === null || !stopId) {\n      continue;\n    }\n    if (allowedStopIds && !allowedStopIds.has(stopId)) {\n      continue;\n    }\n\n    const name = sanitizeOptional(row.stop_name);\n    const code = sanitizeOptional(row.stop_code);\n    features.push({\n      type: 'Feature',\n      geometry: { type: 'Point', coordinates: [lon, lat] },\n      properties: {\n        stopId,\n        name,\n        code,\n      },\n    });\n\n    const tripIds = stopTripIds.get(stopId) ?? new Set<string>();\n    const totalTripCount = tripIds.size;\n    const activeTripCount = countMatchingTrips(tripIds, activeTripIds);\n    const serviceSet = new Set<string>();\n    for (const tripId of tripIds) {\n      const serviceId = tripServiceMap.get(tripId);\n      if (serviceId) {\n        serviceSet.add(serviceId);\n      }\n    }\n\n    details[stopId] = {\n      stopId,\n      name,\n      code,\n      latitude: lat,\n      longitude: lon,\n      totalTripCount,\n      activeTripCount,\n      serviceIds: Array.from(serviceSet).sort(localeCompareString),\n    };\n  }\n\n  return { features, details };\n}\n\ninterface ShapePoint {\n  sequence: number;\n  position: Position;\n}\n\ninterface ShapeArtifactOptions {\n  table?: GtfsTable;\n  allowedShapeIds?: Set<string>;\n  shapeTripIds: Map<string, Set<string>>;\n  tripServiceMap: Map<string, string | undefined>;\n  activeTripIds: Set<string>;\n}\n\ninterface ShapeArtifactsResult {\n  features: Feature<LineString, ShapeProperties>[];\n  details: Record<string, ExplorerShapeDetail>;\n}\n\nfunction buildShapeArtifacts(options: ShapeArtifactOptions): ShapeArtifactsResult {\n  const { table, allowedShapeIds, shapeTripIds, tripServiceMap, activeTripIds } = options;\n  if (!table) {\n    return { features: [], details: {} };\n  }\n\n  const grouped = new Map<string, ShapePoint[]>();\n\n  for (const row of table.rows) {\n    const lat = toNumber(row.shape_pt_lat);\n    const lon = toNumber(row.shape_pt_lon);\n    const shapeId = sanitizeId(row.shape_id);\n    if (lat === null || lon === null || !shapeId) {\n      continue;\n    }\n    if (allowedShapeIds && !allowedShapeIds.has(shapeId)) {\n      continue;\n    }\n    const sequence = toNumber(row.shape_pt_sequence);\n    const points = grouped.get(shapeId) ?? [];\n    points.push({\n      sequence: sequence ?? Number.POSITIVE_INFINITY,\n      position: [lon, lat],\n    });\n    grouped.set(shapeId, points);\n  }\n\n  const features: Feature<LineString, ShapeProperties>[] = [];\n  const details: Record<string, ExplorerShapeDetail> = {};\n\n  for (const [shapeId, points] of grouped) {\n    if (points.length < 2) {\n      continue;\n    }\n\n    points.sort((a, b) => a.sequence - b.sequence);\n    const coordinates = points.map((point) => point.position);\n    features.push({\n      type: 'Feature',\n      geometry: { type: 'LineString', coordinates },\n      properties: { shapeId },\n    });\n\n    const tripIds = shapeTripIds.get(shapeId) ?? new Set<string>();\n    const tripCount = tripIds.size;\n    const activeTripCount = countMatchingTrips(tripIds, activeTripIds);\n    const serviceSet = new Set<string>();\n    for (const tripId of tripIds) {\n      const serviceId = tripServiceMap.get(tripId);\n      if (serviceId) {\n        serviceSet.add(serviceId);\n      }\n    }\n\n    details[shapeId] = {\n      shapeId,\n      tripCount,\n      activeTripCount,\n      serviceIds: Array.from(serviceSet).sort(localeCompareString),\n    };\n  }\n\n  return { features, details };\n}\n\nfunction buildServiceOptions(\n  serviceTripIds: Map<string, Set<string>>,\n  serviceStopIds: Map<string, Set<string>>,\n): ExplorerServiceOption[] {\n  const options: ExplorerServiceOption[] = [];\n  for (const [serviceId, tripIds] of serviceTripIds) {\n    options.push({\n      serviceId,\n      label: serviceId,\n      tripCount: tripIds.size,\n      stopCount: serviceStopIds.get(serviceId)?.size ?? 0,\n    });\n  }\n  options.sort((a, b) => localeCompareString(a.serviceId, b.serviceId));\n  return options;\n}\n\nfunction localeCompareString(a: string, b: string): number {\n  return a.localeCompare(b, 'ja-JP-u-nu-latn');\n}\n\nfunction ensureSet<K, V>(map: Map<K, Set<V>>, key: K): Set<V> {\n  const existing = map.get(key);\n  if (existing) {\n    return existing;\n  }\n  const created = new Set<V>();\n  map.set(key, created);\n  return created;\n}\n\nfunction countMatchingTrips(tripIds: Iterable<string>, activeTripIds: Set<string>): number {\n  let matched = 0;\n  for (const tripId of tripIds) {\n    if (activeTripIds.has(tripId)) {\n      matched += 1;\n    }\n  }\n  return matched;\n}\n\nfunction calculateBounds(\n  stops: Feature<Point, StopProperties>[],\n  shapes: Feature<LineString, ShapeProperties>[],\n): BoundingBox | null {\n  let minLon = Number.POSITIVE_INFINITY;\n  let minLat = Number.POSITIVE_INFINITY;\n  let maxLon = Number.NEGATIVE_INFINITY;\n  let maxLat = Number.NEGATIVE_INFINITY;\n\n  const expand = (lon: number, lat: number) => {\n    if (lon < minLon) minLon = lon;\n    if (lat < minLat) minLat = lat;\n    if (lon > maxLon) maxLon = lon;\n    if (lat > maxLat) maxLat = lat;\n  };\n\n  for (const feature of stops) {\n    const [lon, lat] = feature.geometry.coordinates;\n    expand(lon, lat);\n  }\n\n  for (const feature of shapes) {\n    for (const [lon, lat] of feature.geometry.coordinates) {\n      expand(lon, lat);\n    }\n  }\n\n  if (!isFinite(minLon) || !isFinite(minLat) || !isFinite(maxLon) || !isFinite(maxLat)) {\n    return null;\n  }\n\n  return [minLon, minLat, maxLon, maxLat];\n}\n\nfunction toNumber(value: string | undefined): number | null {\n  if (value === undefined || value === null) {\n    return null;\n  }\n  const parsed = Number(value);\n  return Number.isFinite(parsed) ? parsed : null;\n}\n\nfunction sanitizeId(value: string | undefined): string | null {\n  if (value === undefined || value === null) {\n    return null;\n  }\n  const trimmed = value.trim();\n  return trimmed.length > 0 ? trimmed : null;\n}\n\nfunction sanitizeOptional(value: string | undefined): string | undefined {\n  if (value === undefined || value === null) {\n    return undefined;\n  }\n  const trimmed = value.trim();\n  return trimmed.length > 0 ? trimmed : undefined;\n}\r\n","/**\n * src/features/explorer/loadMapLibre.ts\n * Provides a cached dynamic import of MapLibre GL so Explorer assets stay code-split.\n */\n\ntype MapLibreModule = typeof import('maplibre-gl');\n\nconst defaultImporter = () => import('maplibre-gl');\n\nlet activeImporter: () => Promise<MapLibreModule> = defaultImporter;\nlet cachedPromise: Promise<MapLibreModule> | null = null;\n\nexport async function loadMapLibre(): Promise<MapLibreModule> {\n  if (!cachedPromise) {\n    cachedPromise = activeImporter();\n  }\n  return cachedPromise;\n}\n\nexport function setMapLibreImporter(importer: () => Promise<MapLibreModule>): void {\n  activeImporter = importer;\n  cachedPromise = null;\n}\n\nexport function restoreMapLibreImporter(): void {\n  activeImporter = defaultImporter;\n  cachedPromise = null;\n}\n","/**\r\n * src/features/explorer/MapView.tsx\r\n * Renders MapLibre GL map, updates overlays via service filters, and notifies selection events.\r\n */\nimport { useEffect, useRef, type MutableRefObject } from 'react';\nimport type { Map, GeoJSONSource, MapMouseEvent } from 'maplibre-gl';\nimport 'maplibre-gl/dist/maplibre-gl.css';\n\nimport { buildExplorerGeoJson, type BoundingBox, type ExplorerDataset } from './mapData';\nimport { loadMapLibre } from './loadMapLibre';\n\r\nconst STYLE_URL = 'https://tile.openstreetmap.jp/styles/osm-bright/style.json';\r\nconst STOPS_SOURCE_ID = 'explorer-stops';\r\nconst SHAPES_SOURCE_ID = 'explorer-shapes';\r\nconst STOPS_LAYER_ID = 'explorer-stops-layer';\nconst SHAPES_LAYER_ID = 'explorer-shapes-layer';\nconst DEPOTS_SOURCE_ID = 'explorer-depots';\nconst RELIEF_SOURCE_ID = 'explorer-relief';\nconst DEPOTS_LAYER_ID = 'explorer-depots-layer';\nconst RELIEF_LAYER_ID = 'explorer-relief-layer';\nconst MAP_FIT_PADDING = 48;\nconst DEFAULT_CENTER: [number, number] = [139.7671, 35.6812]; // Tokyo Station\nconst DEFAULT_ZOOM = 9;\n\nexport type ExplorerMapSelection =\n  | { type: 'stop'; id: string }\n  | { type: 'shape'; id: string }\n  | { type: 'manualDepot'; id: string }\n  | { type: 'manualRelief'; id: string };\n\ninterface MapViewProps {\n  dataset: ExplorerDataset;\n  onSelect: (selection: ExplorerMapSelection | null) => void;\n  showDepots: boolean;\n  showReliefPoints: boolean;\n}\n\nexport default function MapView({ dataset, onSelect, showDepots, showReliefPoints }: MapViewProps): JSX.Element {\n  const containerRef = useRef<HTMLDivElement | null>(null);\n  const mapRef = useRef<Map | null>(null);\n  const mapLoadedRef = useRef(false);\n  const latestBoundsRef = useRef<BoundingBox | null>(null);\n  const latestDatasetRef = useRef(dataset);\n  const showDepotsRef = useRef(showDepots);\n  const showReliefPointsRef = useRef(showReliefPoints);\n  const missingImageIdsRef = useRef<Set<string>>(new Set());\n\r\n  useEffect(() => {\n    latestDatasetRef.current = dataset;\n    const map = mapRef.current;\n    if (!map || !mapLoadedRef.current) {\n      return;\n    }\n    applyExplorerData(map, dataset, latestBoundsRef);\n    updateOverlayVisibility(map, showDepotsRef.current, showReliefPointsRef.current);\n  }, [dataset]);\n\n  useEffect(() => {\n    showDepotsRef.current = showDepots;\n    showReliefPointsRef.current = showReliefPoints;\n    const map = mapRef.current;\n    if (!map || !mapLoadedRef.current) {\n      return;\n    }\n    updateOverlayVisibility(map, showDepots, showReliefPoints);\n  }, [showDepots, showReliefPoints]);\n\r\n  useEffect(() => {\n    if (!containerRef.current) {\n      return;\n    }\n\n    let cancelled = false;\n\n    const handleLoad = () => {\n      const activeMap = mapRef.current;\n      if (!activeMap) {\n        return;\n      }\n      mapLoadedRef.current = true;\n      initializeSources(activeMap, latestDatasetRef.current, showDepotsRef.current, showReliefPointsRef.current);\n      applyExplorerData(activeMap, latestDatasetRef.current, latestBoundsRef);\n      updateOverlayVisibility(activeMap, showDepotsRef.current, showReliefPointsRef.current);\n    };\n\n    const handleClick = (event: MapMouseEvent) => {\n      const activeMap = mapRef.current;\n      if (!activeMap || !mapLoadedRef.current) {\n        return;\n      }\n      const selection = getSelectionFromEvent(activeMap, event);\n      onSelect(selection);\n    };\n\n    const mountMap = async () => {\n      try {\n        const maplibre = await loadMapLibre();\n        if (cancelled || !containerRef.current) {\n          return;\n        }\n        const map = new maplibre.Map({\n          container: containerRef.current,\n          style: STYLE_URL,\n          center: DEFAULT_CENTER,\n          zoom: DEFAULT_ZOOM,\n        });\n        mapRef.current = map;\n\n        map.on('load', handleLoad);\n        map.on('styleimagemissing', (event) => {\n          const id = event.id;\n          if (!id || missingImageIdsRef.current.has(id)) {\n            return;\n          }\n          missingImageIdsRef.current.add(id);\n          // MapLibre styles sometimes reference sprites that are not published.\n          // Register a transparent placeholder so warnings do not flood the console.\n          const width = 1;\n          const height = 1;\n          const transparentPixel = new Uint8Array([0, 0, 0, 0]);\n          if (!map.hasImage(id)) {\n            map.addImage(id, { width, height, data: transparentPixel });\n          }\n        });\n        map.on('click', handleClick);\n        map.addControl(new maplibre.NavigationControl({ showCompass: false }), 'top-right');\n      } catch (error) {\n        console.error('MapLibre の読み込みに失敗しました', error);\n      }\n    };\n\n    void mountMap();\n\n    return () => {\n      cancelled = true;\n      const map = mapRef.current;\n      if (map) {\n        map.off('click', handleClick);\n        map.off('load', handleLoad);\n        map.remove();\n      }\n      mapRef.current = null;\n      mapLoadedRef.current = false;\n      latestBoundsRef.current = null;\n      missingImageIdsRef.current.clear();\n      onSelect(null);\n    };\n  }, [onSelect]);\n\r\n  return <div ref={containerRef} className=\"h-[480px] w-full rounded-md border\" />;\r\n}\r\n\r\nfunction initializeSources(\n  map: Map,\n  dataset: ExplorerDataset,\n  showDepots: boolean,\n  showReliefPoints: boolean,\n): void {\n  const empty = buildExplorerGeoJson();\n\n  if (!map.getSource(STOPS_SOURCE_ID)) {\n    map.addSource(STOPS_SOURCE_ID, {\n      type: 'geojson',\n      data: empty.stops,\n    });\n    map.addLayer({\n      id: STOPS_LAYER_ID,\n      type: 'circle',\n      source: STOPS_SOURCE_ID,\n      paint: {\n        'circle-radius': 5,\n        'circle-color': '#2563eb',\n        'circle-stroke-width': 1,\n        'circle-stroke-color': '#ffffff',\n      },\n    });\n  }\n\n  if (!map.getSource(SHAPES_SOURCE_ID)) {\n    map.addSource(SHAPES_SOURCE_ID, {\n      type: 'geojson',\n      data: empty.shapes,\n    });\n    map.addLayer({\n      id: SHAPES_LAYER_ID,\n      type: 'line',\n      source: SHAPES_SOURCE_ID,\n      paint: {\n        'line-color': '#2563eb',\n        'line-width': 3,\n        'line-opacity': 0.8,\n      },\n    });\n  }\n\n  if (!map.getSource(DEPOTS_SOURCE_ID)) {\n    map.addSource(DEPOTS_SOURCE_ID, {\n      type: 'geojson',\n      data: dataset.manualOverlay.depots,\n    });\n    map.addLayer({\n      id: DEPOTS_LAYER_ID,\n      type: 'circle',\n      source: DEPOTS_SOURCE_ID,\n      paint: {\n        'circle-radius': [\n          'interpolate',\n          ['linear'],\n          ['coalesce', ['get', 'dutyImpactCount'], 0],\n          0,\n          5,\n          10,\n          9,\n          30,\n          12,\n        ],\n        'circle-color': '#f97316',\n        'circle-stroke-width': 1,\n        'circle-stroke-color': '#ffffff',\n      },\n      layout: {\n        visibility: showDepots ? 'visible' : 'none',\n      },\n    });\n  }\n\n  if (!map.getSource(RELIEF_SOURCE_ID)) {\n    map.addSource(RELIEF_SOURCE_ID, {\n      type: 'geojson',\n      data: dataset.manualOverlay.reliefPoints,\n    });\n    map.addLayer({\n      id: RELIEF_LAYER_ID,\n      type: 'circle',\n      source: RELIEF_SOURCE_ID,\n      paint: {\n        'circle-radius': [\n          'interpolate',\n          ['linear'],\n          ['coalesce', ['get', 'dutyImpactCount'], 0],\n          0,\n          5,\n          10,\n          9,\n          30,\n          12,\n        ],\n        'circle-color': '#10b981',\n        'circle-stroke-width': 1,\n        'circle-stroke-color': '#034d36',\n      },\n      layout: {\n        visibility: showReliefPoints ? 'visible' : 'none',\n      },\n    });\n  }\n}\n\r\nfunction applyExplorerData(\n  map: Map,\n  dataset: ExplorerDataset,\n  boundsRef: MutableRefObject<BoundingBox | null>,\n): void {\n  const data = dataset.geoJson;\n  const stopsSource = map.getSource(STOPS_SOURCE_ID) as GeoJSONSource | undefined;\n  if (stopsSource) {\n    stopsSource.setData(data.stops);\n  }\n\n  const shapesSource = map.getSource(SHAPES_SOURCE_ID) as GeoJSONSource | undefined;\n  if (shapesSource) {\n    shapesSource.setData(data.shapes);\n  }\n\n  const depotsSource = map.getSource(DEPOTS_SOURCE_ID) as GeoJSONSource | undefined;\n  if (depotsSource) {\n    depotsSource.setData(dataset.manualOverlay.depots);\n  }\n\n  const reliefSource = map.getSource(RELIEF_SOURCE_ID) as GeoJSONSource | undefined;\n  if (reliefSource) {\n    reliefSource.setData(dataset.manualOverlay.reliefPoints);\n  }\n\n  const manualBounds = calculateManualOverlayBounds(dataset);\n  const targetBounds = mergeBounds(data.bounds, manualBounds);\n\n  if (!targetBounds) {\n    boundsRef.current = null;\n    return;\n  }\n\n  if (boundsRef.current && areBoundsEqual(boundsRef.current, targetBounds)) {\n    return;\n  }\n\n  map.fitBounds(targetBounds, { padding: MAP_FIT_PADDING, duration: 600 });\n  boundsRef.current = targetBounds;\n}\n\nfunction updateOverlayVisibility(map: Map, showDepots: boolean, showReliefPoints: boolean): void {\n  if (map.getLayer(DEPOTS_LAYER_ID)) {\n    map.setLayoutProperty(DEPOTS_LAYER_ID, 'visibility', showDepots ? 'visible' : 'none');\n  }\n  if (map.getLayer(RELIEF_LAYER_ID)) {\n    map.setLayoutProperty(RELIEF_LAYER_ID, 'visibility', showReliefPoints ? 'visible' : 'none');\n  }\n}\n\nfunction calculateManualOverlayBounds(dataset: ExplorerDataset): BoundingBox | null {\n  let minLon = Number.POSITIVE_INFINITY;\n  let minLat = Number.POSITIVE_INFINITY;\n  let maxLon = Number.NEGATIVE_INFINITY;\n  let maxLat = Number.NEGATIVE_INFINITY;\n\n  const include = (lon: number, lat: number) => {\n    if (lon < minLon) minLon = lon;\n    if (lat < minLat) minLat = lat;\n    if (lon > maxLon) maxLon = lon;\n    if (lat > maxLat) maxLat = lat;\n  };\n\n  for (const feature of dataset.manualOverlay.depots.features) {\n    const [lon, lat] = feature.geometry.coordinates as [number, number];\n    if (Number.isFinite(lon) && Number.isFinite(lat)) {\n      include(lon, lat);\n    }\n  }\n\n  for (const feature of dataset.manualOverlay.reliefPoints.features) {\n    const [lon, lat] = feature.geometry.coordinates as [number, number];\n    if (Number.isFinite(lon) && Number.isFinite(lat)) {\n      include(lon, lat);\n    }\n  }\n\n  if (!Number.isFinite(minLon) || !Number.isFinite(minLat) || !Number.isFinite(maxLon) || !Number.isFinite(maxLat)) {\n    return null;\n  }\n  return [minLon, minLat, maxLon, maxLat];\n}\n\nfunction mergeBounds(primary: BoundingBox | null, secondary: BoundingBox | null): BoundingBox | null {\n  if (!primary && !secondary) {\n    return null;\n  }\n  if (!primary) {\n    return secondary;\n  }\n  if (!secondary) {\n    return primary;\n  }\n  return [\n    Math.min(primary[0], secondary[0]),\n    Math.min(primary[1], secondary[1]),\n    Math.max(primary[2], secondary[2]),\n    Math.max(primary[3], secondary[3]),\n  ];\n}\n\nfunction getSelectionFromEvent(map: Map, event: MapMouseEvent): ExplorerMapSelection | null {\n  const features = map.queryRenderedFeatures(event.point, {\n    layers: [DEPOTS_LAYER_ID, RELIEF_LAYER_ID, STOPS_LAYER_ID, SHAPES_LAYER_ID],\n  });\n  if (!features.length) {\n    return null;\n  }\n\n  const depotFeature = features.find((candidate) => candidate.layer?.id === DEPOTS_LAYER_ID);\n  if (depotFeature) {\n    const properties = depotFeature.properties as Record<string, unknown> | null;\n    const depotId = typeof properties?.depotId === 'string' ? properties.depotId : undefined;\n    if (depotId) {\n      return { type: 'manualDepot', id: depotId };\n    }\n  }\n\n  const reliefFeature = features.find((candidate) => candidate.layer?.id === RELIEF_LAYER_ID);\n  if (reliefFeature) {\n    const properties = reliefFeature.properties as Record<string, unknown> | null;\n    const reliefId = typeof properties?.reliefId === 'string' ? properties.reliefId : undefined;\n    if (reliefId) {\n      return { type: 'manualRelief', id: reliefId };\n    }\n  }\n\n  const stopFeature = features.find((candidate) => candidate.layer?.id === STOPS_LAYER_ID);\n  if (stopFeature) {\n    const properties = stopFeature.properties as Record<string, unknown> | null;\n    const stopId = typeof properties?.stopId === 'string' ? properties.stopId : undefined;\n    if (stopId) {\n      return { type: 'stop', id: stopId };\r\n    }\r\n  }\r\n\r\n  const shapeFeature = features.find((candidate) => candidate.layer?.id === SHAPES_LAYER_ID);\r\n  if (shapeFeature) {\r\n    const properties = shapeFeature.properties as Record<string, unknown> | null;\r\n    const shapeId = typeof properties?.shapeId === 'string' ? properties.shapeId : undefined;\r\n    if (shapeId) {\r\n      return { type: 'shape', id: shapeId };\r\n    }\r\n  }\r\n\r\n  return null;\r\n}\r\n\r\nfunction areBoundsEqual(a: BoundingBox, b: BoundingBox): boolean {\r\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];\r\n}\r\n","/**\n * src/features/explorer/ExplorerView.tsx\n * Explorer のマップ表示・サービスフィルタ・手動オーバーレイの可視化を司るコンテナ。\n * GTFSインポート結果とマニュアル入力をまとめ、MapView へ渡すデータセットを構築する。\n */\nimport { useEffect, useMemo, useState } from 'react';\n\nimport { Badge } from '@/components/ui/badge';\nimport { Button } from '@/components/ui/button';\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from '@/components/ui/card';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { useGtfsImport } from '@/services/import/GtfsImportProvider';\n\nimport MapView, { type ExplorerMapSelection } from './MapView';\nimport {\n  buildExplorerDataset,\n  type ExplorerDataset,\n  type ExplorerServiceOption,\n  type ExplorerManualOverlay,\n} from './mapData';\n\nconst ALL_SERVICES_VALUE = 'all';\n\nexport default function ExplorerView(): JSX.Element {\n  const { result, manual, dutyState } = useGtfsImport();\n  const [serviceValue, setServiceValue] = useState<string>(ALL_SERVICES_VALUE);\n  const [selection, setSelection] = useState<ExplorerMapSelection | null>(null);\n  const [showDepots, setShowDepots] = useState(true);\n  const [showReliefPoints, setShowReliefPoints] = useState(true);\n\n  const dataset = useMemo(() => {\n    const filter = serviceValue === ALL_SERVICES_VALUE ? undefined : { serviceId: serviceValue };\n    return buildExplorerDataset(result, {\n      filter,\n      manual,\n      duties: dutyState.duties,\n    });\n  }, [result, manual, dutyState.duties, serviceValue]);\n\n  useEffect(() => {\n    if (serviceValue === ALL_SERVICES_VALUE) {\n      return;\n    }\n    if (!dataset.services.some((service) => service.serviceId === serviceValue)) {\n      setServiceValue(ALL_SERVICES_VALUE);\n    }\n  }, [dataset.services, serviceValue]);\n\n  useEffect(() => {\n    setSelection(null);\n  }, [serviceValue, result]);\n\n  const activeServiceOption = dataset.services.find((service) => service.serviceId === dataset.selectedServiceId);\n  const serviceLabel =\n    serviceValue === ALL_SERVICES_VALUE ? '全サービス' : activeServiceOption?.label ?? `サービス ${serviceValue}`;\n  const disableSelect = dataset.services.length === 0;\n\n  return (\n    <div className=\"space-y-6\">\n      <div>\n        <h2 className=\"text-lg font-semibold\">Explorer</h2>\n        <p className=\"text-sm text-muted-foreground\">\n          GTFS 由来の停留所・経路とマニュアルオーバーレイ（デポ・交代地点）を地図上で確認します。\n          サービスフィルタで対象日を絞り込み、選択パネルで詳細を参照してください。\n        </p>\n      </div>\n\n      <div className=\"flex flex-wrap items-end gap-4\">\n        <div>\n          <span className=\"block text-xs font-medium text-muted-foreground\">サービスフィルタ</span>\n          <Select value={serviceValue} onValueChange={setServiceValue} disabled={disableSelect}>\n            <SelectTrigger className=\"w-[240px]\">\n              <SelectValue placeholder=\"サービスを選択\">{serviceLabel}</SelectValue>\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value={ALL_SERVICES_VALUE}>全サービス</SelectItem>\n              {dataset.services.map((service) => (\n                <SelectItem key={service.serviceId} value={service.serviceId}>\n                  {formatServiceOptionLabel(service)}\n                </SelectItem>\n              ))}\n            </SelectContent>\n          </Select>\n        </div>\n        {activeServiceOption && (\n          <Badge variant=\"secondary\" className=\"h-6\">\n            Trip {activeServiceOption.tripCount.toLocaleString()} / Stop {activeServiceOption.stopCount.toLocaleString()}\n          </Badge>\n        )}\n        <div className=\"flex items-center gap-2\">\n          <span className=\"text-xs font-medium text-muted-foreground\">手動オーバーレイ</span>\n          <Button\n            size=\"sm\"\n            variant={showDepots ? 'default' : 'outline'}\n            onClick={() => setShowDepots((prev) => !prev)}\n          >\n            Depots\n          </Button>\n          <Button\n            size=\"sm\"\n            variant={showReliefPoints ? 'default' : 'outline'}\n            onClick={() => setShowReliefPoints((prev) => !prev)}\n          >\n            Relief points\n          </Button>\n        </div>\n      </div>\n\n      <MapView dataset={dataset} onSelect={setSelection} showDepots={showDepots} showReliefPoints={showReliefPoints} />\n\n      <ManualSummaryCard overlay={dataset.manualOverlay} summary={dataset.manualSummary} />\n\n      <SelectionPanel dataset={dataset} selection={selection} serviceLabel={serviceLabel} />\n    </div>\n  );\n}\n\ninterface ManualSummaryCardProps {\n  overlay: ExplorerManualOverlay;\n  summary: ExplorerDataset['manualSummary'];\n}\n\nfunction ManualSummaryCard({ overlay, summary }: ManualSummaryCardProps): JSX.Element {\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle>マニュアルオーバーレイ概要</CardTitle>\n        <CardDescription>デポ / 交代地点と duty 影響件数のサマリです。</CardDescription>\n      </CardHeader>\n      <CardContent className=\"grid gap-4 text-sm sm:grid-cols-3\">\n        <InfoRow label=\"デポ数\" value={summary.depotCount.toLocaleString()} />\n        <InfoRow label=\"交代地点数\" value={summary.reliefPointCount.toLocaleString()} />\n        <InfoRow\n          label=\"Duty 影響件数\"\n          value={(summary.totalDutyImpacts ?? 0).toLocaleString()}\n        />\n        {overlay.depots.features.length === 0 && overlay.reliefPoints.features.length === 0 && (\n          <p className=\"sm:col-span-3 text-muted-foreground\">\n            マニュアル入力が未登録です。Manual タブからデポや交代地点を追加すると表示されます。\n          </p>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n\ninterface SelectionPanelProps {\n  dataset: ExplorerDataset;\n  selection: ExplorerMapSelection | null;\n  serviceLabel: string;\n}\n\nfunction SelectionPanel({ dataset, selection, serviceLabel }: SelectionPanelProps): JSX.Element {\n  if (!selection) {\n    return (\n      <Card>\n        <CardHeader>\n          <CardTitle>選択詳細</CardTitle>\n          <CardDescription>地図上の停留所 / 経路 / オーバーレイをクリックすると詳細を表示します。</CardDescription>\n        </CardHeader>\n        <CardContent>\n          <p className=\"text-sm text-muted-foreground\">\n            {dataset.geoJson.stops.features.length === 0\n              ? 'GTFSフィードをインポートすると Explorer にデータが表示されます。'\n              : '対象を選択してください。'}\n          </p>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  if (selection.type === 'manualDepot') {\n    const depot = dataset.manualOverlay.depots.features.find(\n      (feature) => feature.properties?.depotId === selection.id,\n    );\n    if (!depot) {\n      return fallbackCard('デポ情報を取得できませんでした。入力内容を確認してください。');\n    }\n    const properties = depot.properties ?? {};\n    const coordinates = depot.geometry.coordinates as [number, number];\n    return (\n      <Card>\n        <CardHeader>\n          <CardTitle>デポ {properties.depotId ?? selection.id}</CardTitle>\n          <CardDescription>Duty 影響件数: {(properties.dutyImpactCount ?? 0).toLocaleString()}</CardDescription>\n        </CardHeader>\n        <CardContent className=\"space-y-2 text-sm\">\n          {properties.name && <InfoRow label=\"名称\" value={String(properties.name)} />}\n          <InfoRow label=\"座標\" value={`${coordinates[1].toFixed(5)}, ${coordinates[0].toFixed(5)}`} />\n        </CardContent>\n      </Card>\n    );\n  }\n\n  if (selection.type === 'manualRelief') {\n    const relief = dataset.manualOverlay.reliefPoints.features.find(\n      (feature) => feature.properties?.reliefId === selection.id,\n    );\n    if (!relief) {\n      return fallbackCard('交代地点情報を取得できませんでした。入力内容を確認してください。');\n    }\n    const properties = relief.properties ?? {};\n    const coordinates = relief.geometry.coordinates as [number, number];\n    return (\n      <Card>\n        <CardHeader>\n          <CardTitle>交代地点 {properties.reliefId ?? selection.id}</CardTitle>\n          <CardDescription>Duty 影響件数: {(properties.dutyImpactCount ?? 0).toLocaleString()}</CardDescription>\n        </CardHeader>\n        <CardContent className=\"space-y-2 text-sm\">\n          {properties.name && <InfoRow label=\"名称\" value={String(properties.name)} />}\n          {properties.stopId && <InfoRow label=\"停留所ID\" value={String(properties.stopId)} />}\n          <InfoRow label=\"座標\" value={`${coordinates[1].toFixed(5)}, ${coordinates[0].toFixed(5)}`} />\n        </CardContent>\n      </Card>\n    );\n  }\n\n  if (selection.type === 'stop') {\n    const detail = dataset.stopDetails[selection.id];\n    if (!detail) {\n      return fallbackCard('停留所情報を取得できませんでした。フィルタを変更して再試行してください。');\n    }\n\n    const activeTripCount = dataset.selectedServiceId ? detail.activeTripCount : detail.totalTripCount;\n\n    return (\n      <Card>\n        <CardHeader>\n          <CardTitle>停留所 {detail.stopId}</CardTitle>\n          <CardDescription>{serviceLabel} のTrip数: {activeTripCount.toLocaleString()}</CardDescription>\n        </CardHeader>\n        <CardContent className=\"space-y-3 text-sm\">\n          {detail.name && <InfoRow label=\"名称\" value={detail.name} />}\n          {detail.code && <InfoRow label=\"コード\" value={detail.code} />}\n          <InfoRow label=\"座標\" value={`${detail.latitude.toFixed(5)}, ${detail.longitude.toFixed(5)}`} />\n          <InfoRow label=\"総Trip数\" value={detail.totalTripCount.toLocaleString()} />\n          {dataset.selectedServiceId && (\n            <InfoRow label=\"フィルタ適用時Trip数\" value={detail.activeTripCount.toLocaleString()} />\n          )}\n          {detail.serviceIds.length > 0 && (\n            <div>\n              <span className=\"mb-1 block text-xs font-medium text-muted-foreground\">関連サービス</span>\n              <div className=\"flex flex-wrap gap-2\">\n                {detail.serviceIds.map((serviceId) => (\n                  <Badge\n                    key={serviceId}\n                    variant={serviceId === dataset.selectedServiceId ? 'default' : 'outline'}\n                  >\n                    {serviceId}\n                  </Badge>\n                ))}\n              </div>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    );\n  }\n\n  const detail = dataset.shapeDetails[selection.id];\n  if (!detail) {\n    return fallbackCard('形状情報を取得できませんでした。フィルタを変更して再試行してください。');\n  }\n\n  const activeTripCount = dataset.selectedServiceId ? detail.activeTripCount : detail.tripCount;\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle>経路形状 {detail.shapeId}</CardTitle>\n        <CardDescription>{serviceLabel} のTrip数: {activeTripCount.toLocaleString()}</CardDescription>\n      </CardHeader>\n      <CardContent className=\"space-y-3 text-sm\">\n        <InfoRow label=\"総Trip数\" value={detail.tripCount.toLocaleString()} />\n        {dataset.selectedServiceId && (\n          <InfoRow label=\"フィルタ適用時Trip数\" value={detail.activeTripCount.toLocaleString()} />\n        )}\n        {detail.serviceIds.length > 0 && (\n          <div>\n            <span className=\"mb-1 block text-xs font-medium text-muted-foreground\">関連サービス</span>\n            <div className=\"flex flex-wrap gap-2\">\n              {detail.serviceIds.map((serviceId) => (\n                <Badge\n                  key={serviceId}\n                  variant={serviceId === dataset.selectedServiceId ? 'default' : 'outline'}\n                >\n                  {serviceId}\n                </Badge>\n              ))}\n            </div>\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n\nfunction InfoRow({ label, value }: { label: string; value: string }): JSX.Element {\n  return (\n    <div className=\"flex items-center justify-between rounded-md border border-border/50 bg-card/40 px-3 py-2\">\n      <span className=\"text-xs font-medium text-muted-foreground\">{label}</span>\n      <span className=\"text-sm font-semibold text-foreground\">{value}</span>\n    </div>\n  );\n}\n\nfunction fallbackCard(message: string): JSX.Element {\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle>詳細情報</CardTitle>\n      </CardHeader>\n      <CardContent>\n        <p className=\"text-sm text-muted-foreground\">{message}</p>\n      </CardContent>\n    </Card>\n  );\n}\n\nfunction formatServiceOptionLabel(option: ExplorerServiceOption): string {\n  return `${option.label} · Trips ${option.tripCount.toLocaleString()} / Stops ${option.stopCount.toLocaleString()}`;\n}\n"],"file":"assets/ExplorerView-CjmXqEWl.js"}